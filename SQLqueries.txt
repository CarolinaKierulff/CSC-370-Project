SQL Queries for 370 Project - Store Management System   



CREATING THE TABLE:
--------------------------------------------------------------------------------------------------------

CREATE DATABASE `storemanagerdb`; 

USE `storemanagerdb`;

CREATE TABLE `customer`(
    `customer_id` INT,
    `name` VARCHAR(180),
    `birth_date` DATE,
    `phone_number` VARCHAR(20),
    `email` VARCHAR(180),
    `address` VARCHAR(255)
);

LOAD DATA LOCAL INFILE '/path/customer.csv'
INTO TABLE customer
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

CREATE TABLE `item`(
    `item_id` INT,
    `item_name` VARCHAR(180),
    `price` INT,
    `cost` FLOAT
);

LOAD DATA LOCAL INFILE '/path/item.csv'
INTO TABLE `item`
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

CREATE TABLE `store`(
    `store_id` INT,
    `store_name` VARCHAR(180),
    `manager_id` INT,
    `location` VARCHAR(250)
);

LOAD DATA LOCAL INFILE '/path/store.csv'
INTO TABLE `store`
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

CREATE TABLE `purchases`(
    `purchase_id` INT,
    `customer_id` INT,
    `item_id` INT,
    `store_id` INT,
    `date` DATE
);

LOAD DATA LOCAL INFILE '/path/purchases.csv'
INTO TABLE `purchases`
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

CREATE TABLE `stock`(
    `store_id` INT,
    `item_id` INT,
    `quantity` INT
);

LOAD DATA LOCAL INFILE '/path/stock.csv'
INTO TABLE `stock`
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;

CREATE TABLE `managers`(
    `manager_id` INT,
    `store_id` INT,
    `manager_name` VARCHAR(180),
    `mysql_username` VARCHAR(180)
);

LOAD DATA LOCAL INFILE '/path/managers.csv'
INTO TABLE `managers`
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 LINES;


GENERATING KEYS:
--------------------------------------------------------------------------------------------------------

// Primary Keys::

ALTER TABLE `item`
ADD PRIMARY KEY (`item_id`);

ALTER TABLE `customer`
ADD PRIMARY KEY (`customer_id`);

ALTER TABLE `store`
ADD PRIMARY KEY (`store_id`);


// Foreign Keys::

   // for purchases

ALTER TABLE `purchases`
ADD CONSTRAINT `fk_customer_id`
FOREIGN KEY (`customer_id`) 
REFERENCES `customer`(`customer_id`);

ALTER TABLE `purchases`
ADD CONSTRAINT `fk_item_id`
FOREIGN KEY (`item_id`) 
REFERENCES `item`(`item_id`);

ALTER TABLE `purchases`
ADD CONSTRAINT `fk_store_id`
FOREIGN KEY (`store_id`) 
REFERENCES `store`(`store_id`);

   // for stocks

ALTER TABLE `stock`
ADD CONSTRAINT `fk_store_id_stock`
FOREIGN KEY (`store_id`) 
REFERENCES `store`(`store_id`);

ALTER TABLE `stock`
ADD CONSTRAINT `fk_item_id_stock`
FOREIGN KEY (`item_id`) 
REFERENCES `item`(`item_id`);

Generating Indexes:
--------------------------------------------------------------------------------------------------------

CREATE INDEX `idx_customer_count` ON `customer`(`customer_id`);

CREATE INDEX `idx_store_count` ON `store`(`store_id`);

CREATE INDEX `Idx_item_count` ON `item`(`item_id`, `name`, `price`);

CREATE INDEX `idx_purchase_count` ON `purchases`(`purchase_id`, `customer_id`, `item_id`, `store_id`);

Creating Views:
--------------------------------------------------------------------------------------------------------

// managers of stores with revenue greater than $30,000

CREATE VIEW `managers` AS
	SELECT * FROM `store` WHERE revenue > 30000;

// Customers located in the city of Richmond

CREATE VIEW `RichmondCustomers` AS 
	SELECT `customer_id`, `address` FROM `customer` WHERE address LIKE '%Richmond%';

// Customers located in the city of Victoria

CREATE VIEW `VictoriaCustomers` AS 
	SELECT `customer_id`, `address` FROM `customer` WHERE address LIKE '%Victoria%';

// Items with value of $1000 or greater

CREATE VIEW `HighEndItems` AS SELECT `item_id`, `price` FROM `item` WHERE price > 999;


Role-based access control (RBAC):
--------------------------------------------------------------------------------------------------------

// CREATING USERS (from the 10 managers from the managers table)

CREATE USER 'JaredLeigh91'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!1}';
CREATE USER 'EmHawk98'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!2}';
CREATE USER 'NoahWin24'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!3}';
CREATE USER 'SophMercer'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!4}';
CREATE USER 'LiamMonty87'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!5}';
CREATE USER 'AvaKen23'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!6}';
CREATE USER 'EthRad92'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!7}';
CREATE USER 'IzzyDray21'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!8}';
CREATE USER 'CalVoss90'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!9}';
CREATE USER 'MayaHollow99'@'localhost' IDENTIFIED WITH mysql_native_password BY '{SecretPassword!10}';

// DELETING USER 

DROP USER 'JaredLeigh91'@'localhost';

// GRANTING PRIVILEGES

GRANT ALL ON `customer`.* TO 'JaredLeigh91'@'localhost';
GRANT ALL ON `item`.* TO 'JaredLeigh91'@'localhost';
GRANT ALL ON `purchases`.* TO 'JaredLeigh91'@'localhost';

// SHOWING GRANTS

SHOW GRANTS FOR 'JaredLeigh91'@'localhost';

// APPLY PRIVILEGES CHANGES IMMEDIATELY

FLUSH PRIVILEGES;


DML(INSERT, UPDATE, DELETE) QUERIES:
--------------------------------------------------------------------------------------------------------

// Customer

//INSERT (Adding a customer to the database)

INSERT INTO `customer` (customer_id, name, birth_date, phone_number, email, address)
VALUES (1, 'Larry Peters', '2001-07-01', '123-456-7890', 'larry.pete@gmail.com', '123 Elms Street');


//UPDATE (Updating a customers information in the database)
    // example: updating name 

UPDATE `customer`
SET `name` = 'Maria Lamb'
WHERE `customer_id` = 1;


// DELETE (Deleting a customer from the database)
    // Due to Foreign Key constrains we can't delete a customer from the database, because that customer is linked to a purchase history

DELETE FROM `customer`
    WHERE `customer_id` = 1;

---------------------------------------------

// Store

// INSERT (Adding a store to the database)

INSERT INTO `store` (store_id, store_name, manager_id, location, revenue) 
    VALUES(20, 'Water Equipment Galore', 511,'89 Hilltop Rd Saanich BC A2B2B3', 33000);

// UPDATE (Updating a store information in the database)
    // example: updating address 

UPDATE `store`
SET `location` = '456 Elms Street'
WHERE `store_id` = 501;

---------------------------------------------

// Items

// INSERT (Adding an item to the database)

INSERT INTO `item` (item_id, item_name, price, cost) 
    VALUES(9998, 'Rubber Ducky Yellow', 5, 2);

// UPDATE (Updating an item information in the database)
    // example: updating price 

UPDATE `item`
SET `price` = 6
WHERE `store_id` = 9998;

// Purchase

// INSERT (Adding a new purchase to the database)

    >>> using transactions (since we need to uptade the stock at the same time)


ACID TRANSACTIONS:
--------------------------------------------------------------------------------------------------------

// Updating stock of item and purchase of item simultaneously 

START TRANSACTION;
INSERT INTO `purchases` (purchase_id, customer_id, item_id, store_id, date) 
VALUES
    (21001, 10442, 1103, '001', '2024-06-25'),
    (21001, 10442, 1078, '001', '2024-06-25'),
    (21001, 10442, 1100, '001', '2024-06-25');
UPDATE `stock` 
SET quantity = quantity - 1  
WHERE store_id = '001' AND item_id IN (1103, 1078, 1100);
COMMIT;

// Updating stock of item but only if there is stock available 

DELIMITER $$

CREATE PROCEDURE purchase_item()
BEGIN
    DECLARE itemQuantity INT DEFAULT 0;

    START TRANSACTION;

    SELECT quantity INTO itemQuantity
    FROM stock
    WHERE store_id = '001' AND item_id = 1141;

    IF itemQuantity > 0 THEN 
        INSERT INTO purchases (purchase_id, customer_id, item_id, store_id, date) 
        VALUES (21002, 10442, 1141, '001', '2024-06-25');
        
        UPDATE stock
        SET quantity = quantity - 1
        WHERE store_id = '001' AND item_id IN (1141);
    
        COMMIT;
    ELSE 
        ROLLBACK;
    END IF;
END$$

DELIMITER ;

COMPLEX QUERIES FOR OUR SYSTEM:
--------------------------------------------------------------------------------------------------------

// Top selling products:: 

SELECT `item_name`, `price`, `cost`, (price - cost) AS 'profit'
FROM `item`
ORDER BY profit DESC
LIMIT 5;


// Highest-yielding purchases:: 

SELECT `purchases`.`purchase_id`,  
    SUM(`item`.`price` - `item`.`cost`) AS total_profit
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `purchases`.`purchase_id`
ORDER BY total_profit DESC
LIMIT 5;


// Highest-yielding customers:: 

SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price` - `item`.`cost`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `customer`.`customer_id`, `customer`.`name`
ORDER BY total_spent DESC
LIMIT 5;

// Calculate store revenue (by store_id)::

SELECT `store`.`store_id`, `store`.`store_name`,
    SUM(`item`.`price`) AS total_revenue
FROM `store`
JOIN `purchases` ON `store`.`store_id` = `purchases`.`store_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
WHERE `store`.`store_id` = 1
GROUP BY `store`.`store_id`, `store`.`store_name`;


// Monthly sales trends::

SELECT
    YEAR(`purchases`.`date`) AS sales_year,
    MONTH(`purchases`.`date`) AS sales_month,
    SUM(`item`.price) AS total_sales
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY YEAR(`purchases`.`date`), MONTH(`purchases`.`date`)
ORDER BY total_sales DESC;


// Highest-yielding customers by date:: 

SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price` - `item`.`cost`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
WHERE `purchases`.`date` BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY `customer`.`customer_id`, `customer`.`name`
ORDER BY total_spent DESC
LIMIT 5;


// Looking up a customer purchase history (by customer id)::

SELECT `purchases`.`purchase_id`, `purchases`.`purchase_date`,
    SUM(`item`.`price`) AS total_price
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
JOIN `customer` ON `purchases`.`customer_id` = `customer`.`customer_id`
WHERE `customer`.`customer_id` = ?
GROUP BY `purchases`.`purchase_id`, `purchases`.`purchase_date`
ORDER BY `purchases`.`purchase_date` DESC;


// Looking customers that spend over a certain amount::

SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `customer`.`customer_id`, `customer`.`name`
HAVING SUM(`item`.`price`) > 1000
ORDER BY total_spent DESC;

Complex Queries for our System as Views:
--------------------------------------------------------------------------------------------------------

// top selling products

CREATE VIEW `top_item_profits` AS
SELECT `item_name`, `price`, `cost`, (`price` - `cost`) AS `profit`
FROM `item`
ORDER BY `profit` DESC
LIMIT 5;


// highest yielding purchases

CREATE VIEW `top_purchase_profits` AS
SELECT `purchases`.`purchase_id`,  
    SUM(`item`.`price` - `item`.`cost`) AS total_profit
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `purchases`.`purchase_id`
ORDER BY total_profit DESC
LIMIT 5;

// highest yielding customer

CREATE VIEW `top_customers` AS
SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price` - `item`.`cost`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `customer`.`customer_id`, `customer`.`name`
ORDER BY total_spent DESC
LIMIT 5;

// store revenue

CREATE VIEW `store_revenue` AS
SELECT `store`.`store_id`, `store`.`store_name`,
    SUM(`item`.`price`) AS total_revenue
FROM `store`
JOIN `purchases` ON `store`.`store_id` = `purchases`.`store_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `store`.`store_id`, `store`.`store_name`;

SELECT * FROM `store_revenue` WHERE `store_id` = 9;

// monthly sales

CREATE VIEW `monthly_sales` AS
SELECT
    YEAR(`purchases`.`date`) AS sales_year,
    MONTH(`purchases`.`date`) AS sales_month,
    SUM(`item`.`price`) AS total_sales
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY YEAR(`purchases`.`date`), MONTH(`purchases`.`date`)
ORDER BY total_sales DESC;

// top customer by date

CREATE VIEW `top_customers` AS
SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price` - `item`.`cost`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
WHERE `purchases`.`date` BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY `customer`.`customer_id`, `customer`.`name`
ORDER BY total_spent DESC
LIMIT 5;

// customer purchases

CREATE VIEW `customer_purchases` AS
SELECT `purchases`.`purchase_id`, `purchases`.`purchase_date`,
    SUM(`item`.`price`) AS total_price
FROM `purchases`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
JOIN `customer` ON `purchases`.`customer_id` = `customer`.`customer_id`
GROUP BY `purchases`.`purchase_id`, `purchases`.`purchase_date`
ORDER BY `purchases`.`purchase_date` DESC;

// customer spending

CREATE VIEW `customer_spending` AS
SELECT `customer`.`customer_id`, `customer`.`name`, 
    SUM(`item`.`price`) AS total_spent
FROM `customer`
JOIN `purchases` ON `customer`.`customer_id` = `purchases`.`customer_id`
JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
GROUP BY `customer`.`customer_id`, `customer`.`name`
HAVING SUM(`item`.`price`) > 1000
ORDER BY total_spent DESC;

SUB QUERIES FOR OUR SYSTEM:
--------------------------------------------------------------------------------------------------------

// Customers who have made purchases in a specific store::

SELECT `customer_id`, `name`
FROM `customer` 
WHERE `customer`.`customer_id` IN (
    SELECT `purchases`.`customer_id`
    FROM `purchases` 
    WHERE `purchases`.`store_id` = 1
);


// Average order value::

SELECT AVG(order_total) AS average_order_value
FROM (
    SELECT `purchases`.`purchase_id`, SUM(`item`.`price`) AS order_total
    FROM `purchases`
    JOIN `item` ON `purchases`.`item_id` = `item`.`item_id`
    GROUP BY `purchases`.`purchase_id`
) AS order_totals;


// Customers who have never made a purchase::

SELECT `customer_id`, `name`
FROM `customer`
WHERE NOT EXISTS (
    SELECT 1
    FROM `purchases`
    WHERE `purchases`.`customer_id` = `customer`.`customer_id`
);
